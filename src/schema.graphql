type Query {
  users: [User]
  userById(id: String!): User
  trails: [Trail]
  trail(id: String!): Trail
  events: [Event]
  event(id: String!): Event
  eventsByCarePlanId(carePlanId: String!): [Event]
  eventById(id: String!): Event
  carePlanHistories: [CarePlanHistory]
  carePlanHistoryById(id: String!): CarePlanHistory
  carePlanHistoryByCarePlanId(carePlanId: String!): [CarePlanHistory]
  carePlans: [CarePlan]
  carePlan(id: String!): CarePlan
  eventsConflicts: [HasConflicts!]
  eventsConflictsByEventId(eventId: String!): [HasConflicts!]
}

type Mutation {
  createUser(name: String!, email: String!, password: String!, phone: String, role: String): User
  updateUser(id: String!, name: String, email: String, password: String, isActive: Boolean): User
  createTrail(name: String!, description: String!, screenName: String!): Trail
  updateTrail(id: String!, name: String, description: String, screenName: String): Trail
  createEvent(name: String!, description: String!, screenName: String!, carePlanId: String!): Event
  updateEvent(id: String!, name: String, description: String, screenName: String): Event
  createCarePlan(name: String!, description: String, screenName: String!, memberId: String!, nurseId: String!, trailId: String, type: String!, isActive: Boolean): CarePlan
  updateCarePlan(id: String!, name: String, description: String, screenName: String, isActive: Boolean): CarePlan
  createCarePlanHistory(occurrence: String!, carePlanId: String!): CarePlanHistory
  createEventConflict(firstEventId: String!, secondEventId: String!, dateConflict: String, specificationConflict: String): HasConflicts
  resolveEventConflict(firstEventId: String!, secondEventId: String!, resolved: Boolean!): HasConflicts
}

type User {
  id: String!
  name: String!
  email: String!
  emailVerified: String
  password: String!
  role: String!
  phone: String!
  isActive: Boolean!
  createdAt: String!
  updatedAt: String!

  memberCarePlans: [CarePlan!]
  nurseCarePlans:  [CarePlan!]
}

enum CarePlanType {
  Recurring
  Program
}

type CarePlan {
  id: String!
  name: String!
  description: String!
  screenName: String!
  memberId: String!
  nurseId: String!
  trailId: String
  type: CarePlanType!
  isActive: Boolean!
  createdAt: String!
  updatedAt: String!

  member: User!
  nurse: User!
  trail: Trail
  events: [Event!]
  carePlanHistory: [CarePlanHistory!]
}

type TypeEvent {
  id:          String!
  name:        String!
  screenName:  String!
  description: String!
  createdAt:   String!
  updatedAt:   String!

  events:      [Event!]
}

enum StatusEvent {
  Agendado
  Previsto
}

type Event {
  id: String!
  carePlan: CarePlan!
  expectedDate: String!
  status: String!
  specification: String!
  typeEvent: TypeEvent!
  createdAt: String!
  updatedAt: String!
}

enum TrailName {
  Preventivo
  BaixoRisco
  DoencaCronica
}

type Trail {
  id: String!
  name: String!
  description: TrailName!
  screenName: String!
  createdAt: String!
  updatedAt: String!

  carePlans: [CarePlan!]
}

type CarePlanHistory {
  id: String!
  occurrence: String!
  carePlan: CarePlan!
  createdAt: String!
  updatedAt: String!
}

type HasConflicts {
  firstEventId: String!
  secondEventId: String!
  dateConflict: String!
  specificationConflict: String!
  resolved: Boolean!

  firstEvent: Event!
  secondEvent: Event!
}