generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Member
  Admin
  Nurse
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          UserRole
  phone         String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  memberCarePlans CarePlan[] @relation("MemberCarePlans")
  nurseCarePlans  CarePlan[] @relation("NurseCarePlans")
}

enum TrailName {
  Preventivo
  BaixoRisco
  DoencaCronica
}

model Trail {
  id          String    @id @default(uuid()) @db.Uuid
  name        TrailName
  description String?
  screenName  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  carePlans CarePlan[]
}

enum StatusEvent {
  Agendado
  Previsto
}

model TypeEvent {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  screenName  String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]
}

enum CarePlanType {
  Recurring
  Program
}

model CarePlan {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  description String?
  screenName  String
  member      User         @relation("MemberCarePlans", fields: [memberId], references: [id])
  memberId    String       @db.Uuid
  nurse       User         @relation("NurseCarePlans", fields: [nurseId], references: [id])
  nurseId     String       @db.Uuid
  trail       Trail?       @relation(fields: [trailId], references: [id])
  trailId     String?      @db.Uuid
  type        CarePlanType
  isActive    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  events          Event[]
  carePlanHistory CarePlanHistory[]
}

model Event {
  id            String      @id @default(uuid()) @db.Uuid
  carePlan      CarePlan    @relation(fields: [carePlanId], references: [id])
  carePlanId    String      @db.Uuid
  expectedDate  DateTime
  status        StatusEvent
  specification String
  typeEvent     TypeEvent   @relation(fields: [typeEventId], references: [id])
  typeEventId   String      @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  firstConflicts  HasConflicts[] @relation("FirstEvent")
  secondConflicts HasConflicts[] @relation("SecondEvent")
}

model CarePlanHistory {
  id         String   @id @default(uuid()) @db.Uuid
  carePlan   CarePlan @relation(fields: [carePlanId], references: [id])
  carePlanId String   @db.Uuid
  occurrence Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model HasConflicts {
  firstEvent            Event   @relation("FirstEvent", fields: [firstEventId], references: [id])
  firstEventId          String   @db.Uuid
  secondEvent           Event   @relation("SecondEvent", fields: [secondEventId], references: [id])
  secondEventId         String   @db.Uuid
  dateConflict          DateTime
  specificationConflict String?
  resolved              Boolean  @default(false)

  @@id([firstEventId, secondEventId])
}
